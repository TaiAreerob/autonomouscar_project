#pragma once
#include <geometry_msgs/PoseStamped.h>
#include <geometry_msgs/Polygon.h>
#include <std_msgs/Bool.h>
#include <ros/ros.h>
#include <std_msgs/Float64.h>

struct Vehicle2Mission{
    geometry_msgs::PoseStamped curpos;
    int32_t traffic_light;
    constexpr static int32_t TRAFFIC_GREEN = 4;
};
struct Mission2Vehicle{
    bool isMissionDone;
    bool isAvoidMission;
    bool isParkingMission;
};


class Mission{
public:
    Mission(ros::NodeHandle& nh, int mission_no) : mission_identifier(mission_no) {} //interface for constructor
    virtual Mission2Vehicle processMission(const Vehicle2Mission& v2m) = 0;
    virtual std::string to_string() = 0;
    virtual int getMissionIndentifier() const {return mission_identifier;}
private:
    int mission_identifier;
};

class MissionNone : public Mission{
public:
    MissionNone(ros::NodeHandle& nh, int mission_no) : Mission(nh, mission_no) {}
    Mission2Vehicle processMission(const Vehicle2Mission& v2m) {
        Mission2Vehicle m;
        m.isMissionDone = false; //never done
        return m;
    }
    std::string to_string() {return "MissionNone";}
};

class MissionParking : public Mission{
public:
    MissionParking(
        ros::NodeHandle& nh, 
        int mission_no,
        double seeking_max_velocity,
        double parking_time,
        std::vector<geometry_msgs::PoseStamped> goal_pose_vec, 
        std::vector<geometry_msgs::PoseStamped> recovery_pose_vec,
        std::vector<geometry_msgs::Polygon> goal_area_poly) : 
            Mission(nh, mission_no), seeking_velocity(seeking_velocity), parking_time(parking_time),
            goal_pose_vec(goal_pose_vec), recovery_pose_vec(recovery_pose_vec), goal_area_poly(goal_area_poly) 
            {
                max_vel_pub = nh.advertise<std_msgs::Float64>("op_planner_max_velocity", 10);
                estop_pub = nh.advertise<std_msgs::Bool>("erp42_estop", 10);
                goal_pose_pub = nh.advertise<geometry_msgs::PoseStamped>("goal_navigation", 10);
                state = STATE::SEEKING;
            }
    Mission2Vehicle processMission(const Vehicle2Mission& v2m){
        Mission2Vehicle m;

        double dt;
        std_msgs::Float64 max_vel;
        std_msgs::Bool estop;

        switch(state){
        case STATE::SEEKING_START://find area to park with low speed
            max_vel.data = seeking_velocity;
            max_vel_pub.publish(max_vel);
            state = STATE::SEEKING;
            break;
        
        case STATE::SEEKING: 
            //seeking logic....
            target_goal_idx = 1;
            //seeking logic done...

            //publish goal to navigation stack...
            //publish goal to navigation stack done
            state = STATE::PARKING;
            m.isParkingMission = true;

            break;
        case STATE::PARKING:
            //wait for navigation stack's completion notifying
            //wait for navigation stack's completion notifying end...

            estop.data = true;
            estop_pub.publish(estop);
            parking_start_time = ros::Time::now();
            state = STATE::WAITING;
            break;

        case STATE::WAITING:
            dt = (ros::Time::now() - parking_start_time).toSec();
            if (dt > parking_time) {
                estop.data = false;
                estop_pub.publish(estop);
                state = STATE::RECOVERING;

                //send recovery goal
            }
            break;
        case STATE::RECOVERING:
            //wait for navigation stack's completion notifying
            //wait for navigation stack's completion notifying end...
            m.isParkingMission = false;
            m.isMissionDone = true; //never done
            break;
        }
        return m;
    }
    std::string to_string() {return "MissionParking";}
private:
    ros::Publisher goal_pose_pub;
    ros::Publisher estop_pub;
    ros::Publisher max_vel_pub; 
    

    std::vector<geometry_msgs::PoseStamped> goal_pose_vec, recovery_pose_vec;
    std::vector<geometry_msgs::Polygon> goal_area_poly;
    double seeking_velocity, parking_time;
    enum class STATE {SEEKING_START, SEEKING, PARKING, WAITING, RECOVERING};
    STATE state;
    int target_goal_idx;
    ros::Time parking_start_time;
};

class MissionTrafficLight: public Mission{
public:
    MissionTrafficLight(ros::NodeHandle& nh, int mission_no, 
        double a, double b, double c, double critical_distance) : 
            Mission(nh, mission_no) ,a(a), b(b), c(c), critical_distance(critical_distance), isDone(false) {
                estop_pub = nh.advertise<std_msgs::Bool>("erp42_estop", 10);
            }
    Mission2Vehicle processMission(const Vehicle2Mission& v2m){
        if (false == isDone){
            double x = v2m.curpos.pose.position.x;
            double y = v2m.curpos.pose.position.y;

            double dist_to_stopline = std::fabs(a*x + b*y + c) / std::sqrt(a*a + b*b);
            ROS_WARN("dist to stopline : %lf", dist_to_stopline);
            if (dist_to_stopline < critical_distance){
                if (v2m.traffic_light == Vehicle2Mission::TRAFFIC_GREEN) {
                    std_msgs::Bool b;
                    b.data = false;
                    estop_pub.publish(b);

                    isDone = true;
                }
                else {
                    std_msgs::Bool b;
                    b.data = true;
                    estop_pub.publish(b);
                }
            }
            else {} // do nothing when vehicle is far from stopline
        }

        Mission2Vehicle m;
        m.isMissionDone = isDone; 
        return m;
    }
    std::string to_string() {return "MissionTrafficLight";}
    double a, b, c; //stopline distance calculation members
    double critical_distance;
    bool isDone;
    ros::Publisher estop_pub;
};

class MissionObstacleAvoidance: public Mission{
public:
    MissionObstacleAvoidance(ros::NodeHandle& nh, int mission_no) : Mission(nh, mission_no) {

    }
    Mission2Vehicle processMission(const Vehicle2Mission& v2m){
        Mission2Vehicle m;
        m.isMissionDone = false; //never done
        m.isAvoidMission = true;
        return m;
    }
    std::string to_string() {return "MissionObstacleAvoidance";}
};